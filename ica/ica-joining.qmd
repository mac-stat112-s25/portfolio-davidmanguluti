---
title: "ica-joining"
---

Exercise 1: Where are my keys?
Part a
Define two new datasets, with different students and courses:

students_2 <- data.frame(
  student = c("D", "E", "F"),
  class = c("COMP 101", "BIOL 101", "POLI 101")
)

# Check it out
students_2

  student    class
1       D COMP 101
2       E BIOL 101
3       F POLI 101
enrollments_2 <- data.frame(
  course = c("ART 101", "BIOL 101", "COMP 101"),
  enrollment = c(18, 20, 19)
)

# Check it out
enrollments_2

    course enrollment
1  ART 101         18
2 BIOL 101         20
3 COMP 101         19
To connect the course enrollments to the students’ courses, try do a left_join(). You get an error! Identify the problem by reviewing the error message and the datasets we’re trying to join.

# eval = FALSE: don't evaluate this chunk when knitting. it produces an error.
students_2 |> 
  left_join(enrollments_2)

Part b
The problem is that course name, the key or variable that links these two datasets, is labeled differently: class in the students_2 data and course in the enrollments_2 data. Thus we have to specify these keys in our code:

students_2 |> 
  left_join(enrollments_2, join_by(class == course))

  student    class enrollment
1       D COMP 101         19
2       E BIOL 101         20
3       F POLI 101         NA
# The order of the keys is important:
# join_by("left data key" == "right data key")
# The order is mixed up here, thus we get an error:
students_2 |> 
  left_join(enrollments_2, join_by(course == class))

Part c
Define another set of fake data which adds grade information:

# Add student grades in each course
students_3 <- data.frame(
  student = c("Y", "Y", "Z", "Z"),
  class = c("COMP 101", "BIOL 101", "POLI 101", "COMP 101"),
  grade = c("B", "S", "C", "A")
)

# Check it out
students_3

  student    class grade
1       Y COMP 101     B
2       Y BIOL 101     S
3       Z POLI 101     C
4       Z COMP 101     A
# Add average grades in each course
enrollments_3 <- data.frame(
  class = c("ART 101", "BIOL 101","COMP 101"),
  grade = c("B", "A", "A-"),
  enrollment = c(20, 18, 19)
)

# Check it out
enrollments_3

     class grade enrollment
1  ART 101     B         20
2 BIOL 101     A         18
3 COMP 101    A-         19
Try doing a left_join() to link the students’ classes to their enrollment info. Did this work? Try and figure out the culprit by examining the output.

students_3 |> 
  left_join(enrollments_3)

  student    class grade enrollment
1       Y COMP 101     B         NA
2       Y BIOL 101     S         NA
3       Z POLI 101     C         NA
4       Z COMP 101     A         NA
Part d
The issue here is that our datasets have 2 column names in common: class and grade. BUT grade is measuring 2 different things here: individual student grades in students_3 and average student grades in enrollments_3. Thus it doesn’t make sense to try to join the datasets with respect to this variable. We can again solve this by specifying that we want to join the datasets using the class variable as a key. What are grade.x and grade.y?

students_3 |> 
  left_join(enrollments_3, join_by(class == class))

  student    class grade.x grade.y enrollment
1       Y COMP 101       B      A-         19
2       Y BIOL 101       S       A         18
3       Z POLI 101       C    <NA>         NA
4       Z COMP 101       A      A-         19
Exercise 2: More small practice
Before applying these ideas to bigger datasets, let’s practice identifying which join is appropriate in different scenarios. Define the following fake data on voters (people who have voted) and contact info for voting age adults (people who could vote):

# People who have voted
voters <- data.frame(
  id = c("A", "D", "E", "F", "G"),
  times_voted = c(2, 4, 17, 6, 20)
)

voters

  id times_voted
1  A           2
2  D           4
3  E          17
4  F           6
5  G          20
# Contact info for voting age adults
contact <- data.frame(
  name = c("A", "B", "C", "D"),
  address = c("summit", "grand", "snelling", "fairview"),
  age = c(24, 89, 43, 38)
)

contact

  name  address age
1    A   summit  24
2    B    grand  89
3    C snelling  43
4    D fairview  38
Use the appropriate join for each prompt below. In each case, think before you type:

What dataset goes on the left?
What do you want the resulting dataset to look like? How many rows and columns will it have?
# 1. We want contact info for people who HAVEN'T voted


# 2. We want contact info for people who HAVE voted


# 3. We want any data available on each person


# 4. When possible, we want to add contact info to the voting roster

Exercise 3: Bigger datasets
Let’s apply these ideas to some bigger datasets. In grades, each row is a student-class pair with information on:

sid = student ID
grade = student’s grade
sessionID = an identifier of the class section
# Get rid of some duplicate rows!
grades <- read.csv("https://mac-stat.github.io/data/grades.csv") |> 
  distinct(sid, sessionID, .keep_all = TRUE)
head(grades)

     sid grade   sessionID
1 S31185    D+ session1784
2 S31185    B+ session1785
3 S31185    A- session1791
4 S31185    B+ session1792
5 S31185    B- session1794
6 S31185    C+ session1795
In courses, each row corresponds to a class section with information on:

sessionID = an identifier of the class section
dept = department
level = course level (eg: 100)
sem = semester
enroll = enrollment (number of students)
iid = instructor ID
    sessionID dept level    sem enroll     iid
1 session1784    M   100 FA1991     22 inst265
2 session1785    k   100 FA1991     52 inst458
3 session1791    J   100 FA1993     22 inst223
4 session1792    J   300 FA1993     20 inst235
5 session1794    J   200 FA1993     22 inst234
6 session1795    J   200 SP1994     26 inst230
Use R code to take a quick glance at the data.

# How many observations (rows) and variables (columns) are there in the grades data?


# How many observations (rows) and variables (columns) are there in the courses data?

Exercise 4: Class size
How big are the classes?

Part a
Before digging in, note that some courses are listed twice in the courses data:

courses |> 
  count(sessionID) |> 
  filter(n > 1)

     sessionID n
1  session2047 2
2  session2067 2
3  session2448 2
4  session2509 2
5  session2541 2
6  session2824 2
7  session2826 2
8  session2862 2
9  session2897 2
10 session3046 2
11 session3057 2
12 session3123 2
13 session3243 2
14 session3257 2
15 session3387 2
16 session3400 2
17 session3414 2
18 session3430 2
19 session3489 2
20 session3524 2
21 session3629 2
22 session3643 2
23 session3821 2
If we pick out just 1 of these, we learn that some courses are cross-listed in multiple departments:

courses |> 
  filter(sessionID == "session2047")

    sessionID dept level    sem enroll     iid
1 session2047    g   100 FA2001     12 inst436
2 session2047    m   100 FA2001     28 inst436
For our class size exploration, obtain the total enrollments in each sessionID, combining any cross-listed sections. Save this as courses_combined. NOTE: There’s no joining to do here!

# courses_combined <- courses |> 
#   ___(sessionID) |> 
#   ___(enroll = sum(___))

# Check that this has 1695 rows and 2 columns
# dim(courses_combined)

Part b
Let’s first examine the question of class size from the administration’s viewpoint. To this end, calculate the median class size across all class sections. (The median is the middle or 50th percentile. Unlike the mean, it’s not skewed by outliers.) THINK FIRST:

Which of the 2 datasets do you need to answer this question? One? Both?
If you need course information, use courses_combined not courses.
Do you have to do any joining? If so, which dataset will go on the left, i.e. which dataset includes your primary observations of interest? Which join function will you need?
Part c
But how big are classes from the student perspective? To this end, calculate the median class size for each individual student. Once you have the correct output, store it as student_class_size. THINK FIRST:

Which of the 2 datasets do you need to answer this question? One? Both?
If you need course information, use courses_combined not courses.
Do you have to do any joining? If so, which dataset will go on the left, i.e. which dataset includes your primary observations of interest? Which join function will you need?
Part d
The median class size varies from student to student. To get a sense for the typical student experience and range in student experiences, construct and discuss a histogram of the median class sizes experienced by the students.

# ggplot(student_class_size, aes(x = ___)) + 
#   geom___()

Exercise 5: Narrowing in on classes
Part a
Show data on the students that enrolled in session1986. THINK FIRST: Which of the 2 datasets do you need to answer this question? One? Both?

Part b
Below is a dataset with all courses in department E:

dept_E <- courses |> 
  filter(dept == "E")

What students enrolled in classes in department E? (We just want info on the students, not the classes.)

Exercise 6: All the wrangling
Use all of your wrangling skills to answer the following prompts! THINK FIRST:

Think about what tables you might need to join (if any). Identify the corresponding variables to match.
You’ll need an extra table to convert grades to grade point averages:
gpa_conversion <- tibble(
  grade = c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "NC", "AU", "S"), 
  gp = c(4.3, 4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0, NA, NA)
)

gpa_conversion

# A tibble: 15 × 2
   grade    gp
   <chr> <dbl>
 1 A+      4.3
 2 A       4  
 3 A-      3.7
 4 B+      3.3
 5 B       3  
 6 B-      2.7
 7 C+      2.3
 8 C       2  
 9 C-      1.7
10 D+      1.3
11 D       1  
12 D-      0.7
13 NC      0  
14 AU     NA  
15 S      NA  
Part a
How many total student enrollments are there in each department? Order from high to low.

Part b
What’s the grade-point average (GPA) for each student?

Part c
What’s the median GPA across all students?

Part d
What fraction of grades are below B+?

Part e
What’s the grade-point average for each instructor? Order from low to high.

Part f
CHALLENGE: Estimate the grade-point average for each department, and sort from low to high. NOTE: Don’t include cross-listed courses. Students in cross-listed courses could be enrolled under either department, and we do not know which department to assign the grade to. HINT: You’ll need to do multiple joins.

11.7 Solutions

